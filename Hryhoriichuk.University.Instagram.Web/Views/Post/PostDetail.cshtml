@model Hryhoriichuk.University.Instagram.Web.Models.PostInfo

@{
    Layout = "_Layout";
    var userManager = Model.UserManager;
}

<style>
    /* Add your custom CSS styles here */
    .modal {
        display: none;
        position: fixed;
        z-index: 9999;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.7);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .post-container {
        border: 1px solid #ddd;
        border-radius: 5px;
        margin-bottom: 20px;
        padding: 10px;
    }

    .post-header {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .post-username {
        margin-left: 10px;
        font-weight: bold;
        color: inherit;
        text-decoration: none;
    }

    .post-profile-picture {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        object-fit: cover;
    }

    .post-image {
        max-width: 100%;
        border-radius: 5px;
        width: 1080px;
    }

    .post-caption {
        margin-bottom: 10px;
    }

    .comment-container {
        margin-top: 20px;
    }

    .comment {
        margin-bottom: 10px;
    }

    .comment-username {
        font-weight: bold;
    }

    .comment-input {
        margin-top: 20px;
    }

    .dropdown-menu {
        position: absolute;
        right: 0;
        background-color: #f9f9f9;
        min-width: 160px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        border-radius: 5px;
        display: none;
    }

    .dropdown-item {
        padding: 10px;
        text-decoration: none;
        display: block;
        color: #333;
    }

        .dropdown-item:hover {
            background-color: #ddd;
        }

    .show {
        display: block;
    }


</style>


@if (!(ViewData["IsCurrentUserProfile"] as bool? == true))
{
    @if ((bool)ViewBag.IsPrivate && !(bool)ViewBag.IsFollowing)
    {
        <div class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <div class="text-center">
                        <h2>This user has a private account</h2>
                        <p>Follow them to see their posts!</p>
                    </div>
                    <div class="post-container mt-5">
                        <div class="post-header text-center">
                            <img src="@Model.ProfilePicturePath" alt="Profile Picture" class="rounded-circle post-profile-picture">
                            <a href="/Profile/@ViewBag.PostUsername" class="post-username">@ViewBag.PostUsername</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <div class="post-container">
                        <div class="post-header">
                            <img src="@Model.ProfilePicturePath" alt="Profile Picture" class="post-profile-picture">
                            <a href="/Profile/@ViewBag.PostUsername" class="post-username">@ViewBag.PostUsername</a>
                            @if (ViewData["IsCurrentUserProfile"] as bool? == true)
                            {
                                <div class="dropdown ellipsis-dropdown">
                                    <button class="btn btn-secondary dropdown-toggle" type="button" id="ellipsisDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <i class="bi bi-three-dots"></i>
                                    </button>
                                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="ellipsisDropdown">
                                        <form action="@Url.Action("EditCaption", "Post")" method="post" class="dropdown-item">
                                            <input type="hidden" name="postId" value="@Model.Id" />
                                            <input type="text" name="captionText" class="form-control mb-2" placeholder="Enter new caption" required />
                                            <button type="submit" class="btn btn-primary btn-block">Edit Caption</button>
                                        </form>
                                        <div class="dropdown-divider"></div>
                                        <form action="@Url.Action("DeletePost", "Post")" method="post" class="dropdown-item">
                                            <input type="hidden" name="postId" value="@Model.Id" />
                                            <button type="submit" class="btn btn-danger btn-block">Delete Post</button>
                                        </form>
                                    </div>
                                </div>

                                <a href="#" class="insights-link btn btn-outline-primary" data-post-id="@Model.Id">
                                    Insights <i class="bi bi-bar-chart"></i>
                                </a>

                            }
                        </div>
                        <img src="@Model.ImagePath" class="post-image" alt="Post Image">
                        <p class="post-caption">
                            @{
                                @if (Model.Caption != null)
                                {
                                    var captionWithHashTags = Model.Caption.Split('#');
                                    for (int i = 0; i < captionWithHashTags.Length; i++)
                                    {
                                        var segment = captionWithHashTags[i];
                                        if (i > 0)
                                        {
                                            var hashtag = segment.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).First();
                                            <a href="@Url.Action("PostsByHashtag", "Post", new { hashtag = hashtag })" style="color: blue;">#@(hashtag)</a>
                                            @segment.Substring(hashtag.Length)
                                        }
                                        else
                                        {
                                            @segment
                                        }
                                    }
                                }
                                else
                                {
                                }
                            }
                        </p>
                        <p class="post-date">Date Posted: @Model.DatePosted.ToShortDateString()</p>

                        @if (Model.LikeCount > 0)
                        {
                            <div>
                                <span id="likeCount" class="like-count" style="cursor: pointer;">@Model.LikeCount likes</span>
                            </div>
                            <div id="likersModal" class="modal">
                                <div class="modal-content">
                                    <span class="close">&times;</span>
                                    <h2>Users who have liked the post</h2>
                                    <ul id="likers">
                                        @foreach (var liker in ViewBag.Likers)
                                        {
                                            var likerUser = await userManager.FindByNameAsync(liker);
                                            if (likerUser != null)
                                            {
                                                <li>
                                                    <img src="@likerUser.ProfilePicturePath" alt="Profile Picture" class="post-profile-picture">
                                                    <a href="/Profile/@liker">@liker</a>
                                                </li>
                                            }
                                        }
                                    </ul>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div>No likes yet.</div>
                        }
                    </div>

                    <!-- Include partial view for displaying likes -->
                    @await Html.PartialAsync("_LikesPartial", Model)

                    <!-- Include partial view for displaying comments -->
                    <div class="comment-container">
                        @await Html.PartialAsync("_CommentsPartial", Model)
                    </div>
                </div>
            </div>
        </div>

    }
}
else
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="post-container">
                    <div class="post-header">
                        <img src="@Model.ProfilePicturePath" alt="Profile Picture" class="post-profile-picture">
                        <a href="/Profile/@ViewBag.PostUsername" class="post-username">@ViewBag.PostUsername</a>
                        @if (ViewData["IsCurrentUserProfile"] as bool? == true)
                        {
                            <div class="dropdown ellipsis-dropdown">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="ellipsisDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <i class="bi bi-three-dots"></i>
                                </button>
                                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="ellipsisDropdown">
                                    <form action="@Url.Action("EditCaption", "Post")" method="post" class="dropdown-item">
                                        <input type="hidden" name="postId" value="@Model.Id" />
                                        <input type="text" name="captionText" class="form-control mb-2" placeholder="Enter new caption" required />
                                        <button type="submit" class="btn btn-primary btn-block">Edit Caption</button>
                                    </form>
                                    <div class="dropdown-divider"></div>
                                    <form action="@Url.Action("DeletePost", "Post")" method="post" class="dropdown-item">
                                        <input type="hidden" name="postId" value="@Model.Id" />
                                        <button type="submit" class="btn btn-danger btn-block">Delete Post</button>
                                    </form>
                                </div>
                            </div>

                            <a href="#" class="insights-link btn btn-outline-primary" data-post-id="@Model.Id">
                                Insights <i class="bi bi-bar-chart"></i>
                            </a>

                        }
                    </div>
                    <img src="@Model.ImagePath" class="post-image" alt="Post Image">
                    <p class="post-caption">
                        @{
                            @if (Model.Caption != null)
                            {
                                var captionWithHashTags = Model.Caption.Split('#');
                                for (int i = 0; i < captionWithHashTags.Length; i++)
                                {
                                    var segment = captionWithHashTags[i];
                                    if (i > 0)
                                    {
                                        var hashtag = segment.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).First();
                                        <a href="@Url.Action("PostsByHashtag", "Post", new { hashtag = hashtag })" style="color: blue;">#@(hashtag)</a>
                                        @segment.Substring(hashtag.Length)
                                    }
                                    else
                                    {
                                        @segment
                                    }
                                }
                            }
                            else
                            {
                            }
                        }
                    </p>
                    <p class="post-date">Date Posted: @Model.DatePosted.ToShortDateString()</p>

                    @if (Model.LikeCount > 0)
                    {
                        <div>
                            <span id="likeCount" class="like-count" style="cursor: pointer;">@Model.LikeCount likes</span>
                        </div>
                        <div id="likersModal" class="modal">
                            <div class="modal-content">
                                <span class="close">&times;</span>
                                <h2>Users who have liked the post</h2>
                                <ul id="likers">
                                    @foreach (var liker in ViewBag.Likers)
                                    {
                                        var likerUser = await userManager.FindByNameAsync(liker);
                                        if (likerUser != null)
                                        {
                                            <li>
                                                <img src="@likerUser.ProfilePicturePath" alt="Profile Picture" class="post-profile-picture">
                                                <a href="/Profile/@liker">@liker</a>
                                            </li>
                                        }
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div>No likes yet.</div>
                    }
                </div>

                <!-- Include partial view for displaying likes -->
                @await Html.PartialAsync("_LikesPartial", Model)

                <!-- Include partial view for displaying comments -->
                <div class="comment-container">
                    @await Html.PartialAsync("_CommentsPartial", Model)
                </div>
            </div>
        </div>
    </div>
}
    
@section scripts {
    <script>
        // Get the modal
        var modal = document.getElementById('likersModal');

        // Get the button that opens the modal
        var likeCount = document.getElementById('likeCount');

        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("close")[0];

        // When the user clicks the button, open the modal
        likeCount.onclick = function () {
            if (@Model.LikeCount > 0) {
                modal.style.display = "block";
            }
        }

        // When the user clicks on <span> (x), close the modal
        span.onclick = function () {
            modal.style.display = "none";
        }

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }

        document.querySelector('.ellipsis-icon').addEventListener('click', function () {
            document.querySelector('.dropdown-menu').classList.toggle('show');
        });

        window.addEventListener('click', function (event) {
            if (!event.target.matches('.ellipsis-icon')) {
                var dropdowns = document.getElementsByClassName("dropdown-menu");
                for (var i = 0; i < dropdowns.length; i++) {
                    var openDropdown = dropdowns[i];
                    if (openDropdown.classList.contains('show')) {
                        openDropdown.classList.remove('show');
                    }
                }
            }
        });
    </script>

    <!-- Include jQuery and Bootstrap JS for modal functionality -->
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>

    <script>
        $(document).on('click', '.insights-link', function (e) {
            e.preventDefault();

            var postId = $(this).data('post-id');

            $.ajax({
                url: '/PostInsights',
                type: 'GET',
                data: { postId: postId },
                success: function (data) {
                    $('#insightsModal').remove();
                    $('body').append(data);
                    $('#insightsModal').modal('show');
                },
                error: function () {
                    alert('Failed to load insights.');
                }
            });
        });
    </script>


        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
}
